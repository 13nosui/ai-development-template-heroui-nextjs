rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // ユーザー認証チェック関数
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    // メール認証済みチェック関数
    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    // ユーザー自身かチェック
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // データサイズ制限チェック
    function isValidDataSize() {
      return request.resource.size < 1024 * 1024; // 1MB制限
    }
    
    // 文字列長制限チェック
    function isValidStringLength(field, maxLength) {
      return field is string && field.size() <= maxLength;
    }
    
    // 必須フィールドチェック
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    // 禁止文字チェック（XSS対策）
    function isSafeString(text) {
      return text is string && 
             !text.matches('.*<script.*') && 
             !text.matches('.*javascript:.*') && 
             !text.matches('.*on\\w+\\s*=.*');
    }
    
    // posts コレクションのルール（強化版）
    match /posts/{postId} {
      // 読み取り: 認証済みユーザーのみ
      allow read: if isAuthenticated();
      
      // 作成: メール認証済みユーザーが自分のuserIdを設定し、必要なフィールドがある場合のみ
      allow create: if isEmailVerified() 
        && isOwner(request.resource.data.userId)
        && hasRequiredFields(['userId', 'title', 'content', 'createdAt'])
        && isValidDataSize()
        && isValidStringLength(request.resource.data.title, 100)
        && isValidStringLength(request.resource.data.content, 5000)
        && isSafeString(request.resource.data.title)
        && isSafeString(request.resource.data.content)
        && request.resource.data.createdAt is timestamp
        && request.resource.data.createdAt == request.time
        // 追加のバリデーション
        && (!('tags' in request.resource.data) || 
            (request.resource.data.tags is list && request.resource.data.tags.size() <= 10))
        && (!('category' in request.resource.data) || 
            request.resource.data.category in ['general', 'tech', 'lifestyle', 'business']);
      
      // 更新: 投稿の作成者のみ、一部フィールドのみ変更可能
      allow update: if isEmailVerified() 
        && isOwner(resource.data.userId)
        && isValidDataSize()
        // 変更可能フィールドの制限
        && request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['title', 'content', 'tags', 'category', 'updatedAt'])
        && isValidStringLength(request.resource.data.title, 100)
        && isValidStringLength(request.resource.data.content, 5000)
        && isSafeString(request.resource.data.title)
        && isSafeString(request.resource.data.content)
        && request.resource.data.updatedAt == request.time
        // 重要フィールドの変更を禁止
        && request.resource.data.userId == resource.data.userId
        && request.resource.data.createdAt == resource.data.createdAt;
      
      // 削除: 投稿の作成者のみ
      allow delete: if isEmailVerified() && isOwner(resource.data.userId);
    }
    
    // users コレクション（強化版）
    match /users/{userId} {
      // 読み取り: 自分自身のデータのみ
      allow read: if isOwner(userId);
      
      // 作成: 自分自身のデータ作成のみ
      allow create: if isEmailVerified()
        && isOwner(userId)
        && hasRequiredFields(['email', 'displayName', 'createdAt'])
        && isValidDataSize()
        && isValidStringLength(request.resource.data.displayName, 50)
        && isSafeString(request.resource.data.displayName)
        && request.resource.data.email is string
        && request.resource.data.createdAt == request.time;
      
      // 更新: 自分自身のデータ更新のみ、一部フィールドのみ
      allow update: if isEmailVerified()
        && isOwner(userId)
        && isValidDataSize()
        && request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['displayName', 'bio', 'avatar', 'preferences', 'updatedAt'])
        && isValidStringLength(request.resource.data.displayName, 50)
        && (!('bio' in request.resource.data) || 
            isValidStringLength(request.resource.data.bio, 500))
        && isSafeString(request.resource.data.displayName)
        && (!('bio' in request.resource.data) || 
            isSafeString(request.resource.data.bio))
        && request.resource.data.updatedAt == request.time;
      
      // 削除: 禁止（データ保護）
      allow delete: if false;
    }
    
    // comments コレクション（投稿へのコメント）
    match /posts/{postId}/comments/{commentId} {
      // 読み取り: 認証済みユーザーのみ
      allow read: if isAuthenticated();
      
      // 作成: メール認証済みユーザーのみ
      allow create: if isEmailVerified()
        && isOwner(request.resource.data.userId)
        && hasRequiredFields(['userId', 'content', 'createdAt'])
        && isValidDataSize()
        && isValidStringLength(request.resource.data.content, 1000)
        && isSafeString(request.resource.data.content)
        && request.resource.data.createdAt == request.time;
      
      // 更新: コメント作成者のみ、コンテンツのみ変更可能
      allow update: if isEmailVerified()
        && isOwner(resource.data.userId)
        && request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['content', 'updatedAt'])
        && isValidStringLength(request.resource.data.content, 1000)
        && isSafeString(request.resource.data.content)
        && request.resource.data.updatedAt == request.time;
      
      // 削除: コメント作成者または投稿作成者
      allow delete: if isEmailVerified() && 
        (isOwner(resource.data.userId) || 
         isOwner(get(/databases/$(database)/documents/posts/$(postId)).data.userId));
    }
    
    // notifications コレクション（通知）
    match /users/{userId}/notifications/{notificationId} {
      // 読み取り: 自分の通知のみ
      allow read: if isOwner(userId);
      
      // 作成: システムのみ（Cloud Functions）
      allow create: if false;
      
      // 更新: 既読状態の変更のみ
      allow update: if isOwner(userId)
        && request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['read', 'readAt'])
        && request.resource.data.read == true
        && request.resource.data.readAt == request.time;
      
      // 削除: 自分の通知のみ
      allow delete: if isOwner(userId);
    }
    
    // admin コレクション（管理者専用）
    match /admin/{document} {
      // 管理者権限チェック（Cloud Functionsで実装）
      allow read, write: if false;
    }
    
    // セキュリティログ（読み取り専用）
    match /security_logs/{logId} {
      allow read: if false; // 管理者のみCloud Functionsで操作
      allow write: if false;
    }
    
    // その他のコレクションはデフォルトで拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
