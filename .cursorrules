# Cursor開発ガイドライン - nidomi.io

## 基本方針
- **段階的実装**: タスクを小さな単位に分割して段階的に実装する
- **確認ベース**: 各ステップで動作確認を行ってから次に進む
- **単一責任**: 1つのタスクに集中し、複数機能を同時実装しない

## 実装の進め方
1. **事前確認**: `.claude/project-rules.md` と `.claude/context.md` を必ず参照
2. **小単位実装**: 1つの機能につき1つのファイルまたはコンポーネントに集中
3. **段階確認**: 実装前に具体的な手順を3-5ステップに分割して提示
4. **動作確認**: 各段階で「次のステップに進みますか？」と確認を求める
5. **エラー対応**: エラーが発生した場合は、その箇所のみを修正

## タスク分割の例
### ❌ 悪い例
「認証機能を完全に実装してください」

### ✅ 良い例  
「認証機能を以下の順序で段階的に実装してください：
1. ログインフォームのUIのみ（バリデーションなし）
2. フォームバリデーション機能の追加
3. Firebase Auth連携の実装
各段階で動作確認をしてから次に進んでください。」

## 禁止事項
- 複数ファイルの同時大幅変更
- 未確認のまま次の機能に進む
- 全体的なリファクタリングを一度に行う
- 任意の値（arbitrary values）の使用
- 標準Tailwindクラス（text-gray-500等）の使用

## 推奨する作業単位
- UIコンポーネント1つずつ
- API機能1つずつ  
- バグ修正1つずつ
- テスト追加1つずつ

## 確認必須項目
- [ ] TypeScript型エラーなし
- [ ] ESLint/Prettier準拠
- [ ] カスタムデザイントークンのみ使用
- [ ] アクセシビリティ対応確認
- [ ] レスポンシブ対応確認

## コマンド優先順位
1. `.claude/commands/design/figma-to-component.md` - 新規コンポーネント作成
2. `.claude/commands/design/refactor-safe.md` - 既存コンポーネント改修
3. `.claude/commands/development/create-feature-complete.md` - 機能実装
4. `.claude/commands/development/review-comprehensive.md` - 品質確認

## ショートカットコマンド
- **"/step"** = step-by-step-implementation.mdに従って段階的実装
- **"/figma"** = figma-to-component.mdに従ってコンポーネント作成  
- **"/refactor"** = refactor-safe.mdに従って安全リファクタリング
- **"/review"** = review-comprehensive.mdに従って品質確認
- **"/feature"** = create-feature-complete.mdに従って機能実装
- **"/test"** = test-all.mdに従ってテスト実行

### Git操作コマンド
- **"/commit"** = 変更をコミット（適切なコミットメッセージ付き）
- **"/push"** = 現在のブランチをリモートにプッシュ
- **"/pr"** = プルリクエストを作成（GitHub CLI使用）
- **"/deploy"** = deploy-production.mdに従って本番デプロイ

### フルワークフローコマンド
- **"/dev"** = 完全開発ワークフロー（ブランチ作成→実装→PR→マージ）
- **"/quick"** = 簡易ワークフロー（現在ブランチで実装→コミット→プッシュ）
- **"/hotfix"** = 緊急修正ワークフロー（hotfix/ブランチ→修正→即座にマージ）

## 使用例
User: "/step ログイン機能を実装"
→ step-by-step-implementation.mdに従って、ログイン機能を段階的に実装

User: "/figma ボタンコンポーネント"  
→ figma-to-component.mdに従って、ボタンコンポーネントを作成

User: "/commit"
→ 変更を分析して適切なメッセージでコミット

User: "/commit ログイン機能を追加"  
→ 指定されたメッセージでコミット

User: "/push"
→ 現在のブランチをリモートにプッシュ

User: "/pr ログイン機能の実装"
→ 指定タイトルでPRを作成

User: "/commit && /push && /pr"
→ コミット→プッシュ→PR作成を連続実行

## Git操作の詳細動作
### /commit の動作
1. `git status` で変更を確認
2. 変更内容を分析して適切なコミットメッセージを生成
3. `git add .` で全変更をステージング
4. `git commit -m "生成されたメッセージ"` で実行

### /push の動作  
1. 現在のブランチを確認
2. `git push origin [current-branch]` を実行
3. プッシュ結果を報告

### /pr の動作
1. 現在のブランチからmainへのPRを作成
2. 変更内容を分析してPR説明文を自動生成
3. `gh pr create` でGitHub PRを作成

## フルワークフロー詳細

### /dev の動作フロー
1. **ブランチ確認**: `git status` と `git branch` で現在状況確認
2. **ブランチ作成**: `feature/[機能名]` または `fix/[修正名]` ブランチを作成
3. **段階的実装**: step-by-step-implementation.mdに従って実装
4. **品質チェック**: review-comprehensive.mdに従って確認
5. **コミット**: 適切なメッセージで変更をコミット
6. **プッシュ**: リモートブランチにプッシュ
7. **PR作成**: mainブランチへのプルリクエスト作成
8. **マージ確認**: PR承認後の自動マージ（オプション）

### /quick の動作フロー
1. **現在ブランチで作業**: 新規ブランチ作成をスキップ
2. **実装**: 段階的実装
3. **コミット→プッシュ**: 連続実行

### /hotfix の動作フロー
1. **hotfixブランチ作成**: `hotfix/[修正名]` ブランチ
2. **緊急修正**: 最小限の修正実装
3. **即座にマージ**: レビュー省略でmainに直接マージ

## ワークフロー制御オプション

### 自動化レベル設定
- **"/dev --auto"** = 全ステップを自動実行（確認なし）
- **"/dev --step"** = 各ステップで確認を求める（デフォルト）
- **"/dev --pause"** = 実装完了後に一時停止（手動でPR作成）

### ブランチ命名規則
- 機能実装: `feature/[機能名]`
- バグ修正: `fix/[修正内容]`  
- 緊急修正: `hotfix/[修正内容]`
- リファクタリング: `refactor/[対象]`

### 自動マージ条件
- [ ] 全テストパス
- [ ] コードレビュー承認（設定による）
- [ ] Conflictなし
- [ ] CI/CDパイプライン成功

## コミットメッセージ生成ルール
以下の形式で適切なコミットメッセージを生成：

### 機能追加
- `feat: ログイン機能を追加`
- `feat(auth): Firebase認証を実装`

### バグ修正
- `fix: ボタンクリック時のエラーを修正`
- `fix(ui): レスポンシブ表示の問題を解決`

### リファクタリング
- `refactor: HeaderComponentのスタイリングを改善`
- `refactor(types): 型定義を整理`

### ドキュメント
- `docs: READMEにセットアップ手順を追加`
- `docs(api): API仕様書を更新`

### その他
- `style: ESLintルールに従ってコードを修正`
- `test: ログイン機能のテストを追加`
- `chore: 依存関係を更新`

## デフォルト動作
実装系のタスクを依頼された場合、特に指示がなければ自動的にstep-by-step-implementation.mdに従って段階的に実装してください。

例：
- 「ログイン機能を作って」→ 自動的に段階的実装
- 「ボタンコンポーネントを作って」→ 自動的にfigma-to-component.md適用

## 高度な使用例

### フル開発ワークフロー
```
User: "/dev ログイン機能を実装"

Claude: "🚀 フル開発ワークフローを開始します

Step 1: ブランチ確認
現在: main ブランチ ✅
未コミット変更: なし ✅

Step 2: 作業ブランチ作成
feature/login-implementation を作成します

Step 3: 段階的実装開始
ログイン機能を以下の手順で実装：
□ ログインフォームUI作成
□ バリデーション機能追加  
□ Firebase Auth連携
□ エラーハンドリング

最初のステップ（フォームUI）から始めますか？"
```

### チーム開発での使用
```
User: "/dev --step ユーザー認証機能 --reviewer @team-lead"
→ ステップ確認付きで実装、PR作成時に@team-leadを自動アサイン

User: "/dev --auto 軽微なUIの調整 --no-review"  
→ 確認なしで全自動実行、レビュー不要でマージ
```

### 複数機能の並行開発
```
User: "/dev 機能A && /dev 機能B"
→ 機能Aを完了後、feature/機能B ブランチで機能Bを開始
```
