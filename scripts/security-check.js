#!/usr/bin/env node

/**
 * Âº∑Âåñ„Åï„Çå„Åü„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ„Çπ„ÇØ„É™„Éó„Éà
 * Áí∞Â¢ÉÂ§âÊï∞„ÄÅË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÄÅ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£Áä∂Ê≥Å„ÇíÂåÖÊã¨ÁöÑ„Å´„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Åæ„Åô
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîí Âº∑Âåñ„Åï„Çå„Åü„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÈñãÂßã„Åó„Åæ„Åô...\n');

let hasErrors = false;
let hasWarnings = false;
const securityReport = {
  timestamp: new Date().toISOString(),
  checks: {},
  vulnerabilities: [],
  recommendations: []
};

// 1. Áí∞Â¢ÉÂ§âÊï∞„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆÂ≠òÂú®Á¢∫Ë™çÔºàÂº∑ÂåñÁâàÔºâ
function checkEnvTemplate() {
  console.log('üìã Áí∞Â¢ÉÂ§âÊï∞„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ');
  const result = { status: 'pass', details: [], warnings: [] };
  
  if (!fs.existsSync('.env.example')) {
    console.log('‚ùå .env.example „Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    result.status = 'fail';
    result.details.push('.env.example file missing');
    hasErrors = true;
  } else {
    console.log('‚úÖ .env.example „Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Åæ„Åô');
    result.details.push('.env.example file exists');
    
    // ÂøÖË¶Å„Å™Áí∞Â¢ÉÂ§âÊï∞„Åå„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    const envExample = fs.readFileSync('.env.example', 'utf8');
    const requiredVars = [
      'NEXT_PUBLIC_FIREBASE_API_KEY',
      'NEXT_PUBLIC_FIREBASE_PROJECT_ID',
      'FIGMA_ACCESS_TOKEN',
      'ENCRYPTION_KEY',
      'JWT_SECRET',
      'CSRF_SECRET'
    ];
    
    const missingVars = [];
    requiredVars.forEach(varName => {
      if (envExample.includes(varName)) {
        console.log(`  ‚úÖ ${varName} „Åå„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô`);
        result.details.push(`${varName} included in template`);
      } else {
        console.log(`  ‚ö†Ô∏è  ${varName} „Åå„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì`);
        result.warnings.push(`${varName} missing from template`);
        missingVars.push(varName);
        hasWarnings = true;
      }
    });
    
    // Ê©üÂØÜÊÉÖÂ†±„ÅÆ„Éè„Éº„Éâ„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„ÉÅ„Çß„ÉÉ„ÇØ
    const dangerousPatterns = [
      /[A-Za-z0-9]{32,}/g, // Èï∑„ÅÑÊñáÂ≠óÂàóÔºàAPI„Ç≠„Éº„ÅÆÂèØËÉΩÊÄßÔºâ
      /sk-[A-Za-z0-9]{48}/g, // OpenAI API„Ç≠„Éº„Éë„Çø„Éº„É≥
      /xoxb-[0-9]{11}-[0-9]{11}-[A-Za-z0-9]{24}/g // Slack Token
    ];
    
    dangerousPatterns.forEach(pattern => {
      if (pattern.test(envExample)) {
        console.log('  ‚ö†Ô∏è  ÂÆüÈöõ„ÅÆÊ©üÂØÜÊÉÖÂ†±„Åå„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô');
        result.warnings.push('Potential real secrets in template');
        hasWarnings = true;
      }
    });
  }
  
  securityReport.checks.envTemplate = result;
  console.log('');
}

// 2. Next.jsË®≠ÂÆö„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éò„ÉÉ„ÉÄ„Éº„ÉÅ„Çß„ÉÉ„ÇØ
function checkNextConfig() {
  console.log('üõ°Ô∏è  Next.js „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö„ÉÅ„Çß„ÉÉ„ÇØ');
  
  if (!fs.existsSync('next.config.js')) {
    console.log('‚ùå next.config.js „Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    hasErrors = true;
    return;
  }
  
  const nextConfig = fs.readFileSync('next.config.js', 'utf8');
  const securityHeaders = [
    'X-Frame-Options',
    'X-Content-Type-Options', 
    'Content-Security-Policy',
    'Strict-Transport-Security'
  ];
  
  securityHeaders.forEach(header => {
    if (nextConfig.includes(header)) {
      console.log(`  ‚úÖ ${header} „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åô`);
    } else {
      console.log(`  ‚ùå ${header} „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì`);
      hasErrors = true;
    }
  });
  console.log('');
}

// 3. .gitignoreË®≠ÂÆö„ÉÅ„Çß„ÉÉ„ÇØ
function checkGitignore() {
  console.log('üìÅ .gitignore Ë®≠ÂÆö„ÉÅ„Çß„ÉÉ„ÇØ');
  
  if (!fs.existsSync('.gitignore')) {
    console.log('‚ùå .gitignore „Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    hasErrors = true;
    return;
  }
  
  const gitignore = fs.readFileSync('.gitignore', 'utf8');
  const sensitivePatterns = [
    '.env',
    '*.key',
    '*.cert',
    '*.pem'
  ];
  
  sensitivePatterns.forEach(pattern => {
    if (gitignore.includes(pattern)) {
      console.log(`  ‚úÖ ${pattern} „ÅåÈô§Â§ñË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åô`);
    } else {
      console.log(`  ‚ö†Ô∏è  ${pattern} „ÅåÈô§Â§ñË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì`);
    }
  });
  console.log('');
}

// 4. package.json„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„ÇØ„É™„Éó„Éà„ÉÅ„Çß„ÉÉ„ÇØ
function checkPackageScripts() {
  console.log('üì¶ package.json „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„ÇØ„É™„Éó„Éà„ÉÅ„Çß„ÉÉ„ÇØ');
  
  if (!fs.existsSync('package.json')) {
    console.log('‚ùå package.json „Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    hasErrors = true;
    return;
  }
  
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const securityScripts = [
    'security:audit',
    'security:check',
    'env:check'
  ];
  
  securityScripts.forEach(script => {
    if (packageJson.scripts && packageJson.scripts[script]) {
      console.log(`  ‚úÖ ${script} „Çπ„ÇØ„É™„Éó„Éà„ÅåÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Åæ„Åô`);
    } else {
      console.log(`  ‚ùå ${script} „Çπ„ÇØ„É™„Éó„Éà„ÅåÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì`);
      hasErrors = true;
    }
  });
  console.log('');
}

// 5. GitHub ActionsË®≠ÂÆö„ÉÅ„Çß„ÉÉ„ÇØ
function checkGitHubActions() {
  console.log('üîÑ GitHub Actions „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö„ÉÅ„Çß„ÉÉ„ÇØ');
  
  const ciPath = '.github/workflows/ci.yml';
  if (!fs.existsSync(ciPath)) {
    console.log('‚ùå GitHub Actions CIË®≠ÂÆö„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    hasErrors = true;
    return;
  }
  
  const ciConfig = fs.readFileSync(ciPath, 'utf8');
  
  if (ciConfig.includes('npm audit')) {
    console.log('  ‚úÖ ‰æùÂ≠òÈñ¢‰øÇ„ÅÆËÑÜÂº±ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
  } else {
    console.log('  ‚ùå ‰æùÂ≠òÈñ¢‰øÇ„ÅÆËÑÜÂº±ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
    hasErrors = true;
  }
  
  if (ciConfig.includes('semgrep') || ciConfig.includes('Semgrep')) {
    console.log('  ‚úÖ Semgrep„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
  } else {
    console.log('  ‚ö†Ô∏è  Semgrep„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
  }
  
  console.log('');
}

// 6. ‰æùÂ≠òÈñ¢‰øÇ„ÅÆËÑÜÂº±ÊÄßË©≥Á¥∞„ÉÅ„Çß„ÉÉ„ÇØ
function checkDependencyVulnerabilities() {
  console.log('üîç ‰æùÂ≠òÈñ¢‰øÇËÑÜÂº±ÊÄßË©≥Á¥∞„ÉÅ„Çß„ÉÉ„ÇØ');
  const result = { status: 'pass', details: [], warnings: [] };
  
  try {
    // npm audit „ÇíÂÆüË°å„Åó„Å¶Ë©≥Á¥∞„Å™ËÑÜÂº±ÊÄßÊÉÖÂ†±„ÇíÂèñÂæó
    console.log('  üìä ‰æùÂ≠òÈñ¢‰øÇ„Çπ„Ç≠„É£„É≥ÂÆüË°å‰∏≠...');
    const auditOutput = execSync('npm audit --json', { encoding: 'utf8' });
    const auditData = JSON.parse(auditOutput);
    
    if (auditData.vulnerabilities && Object.keys(auditData.vulnerabilities).length > 0) {
      const criticalCount = Object.values(auditData.vulnerabilities).filter(v => v.severity === 'critical').length;
      const highCount = Object.values(auditData.vulnerabilities).filter(v => v.severity === 'high').length;
      const moderateCount = Object.values(auditData.vulnerabilities).filter(v => v.severity === 'moderate').length;
      
      console.log(`  ‚ö†Ô∏è  ËÑÜÂº±ÊÄßÁô∫Ë¶ã: Critical(${criticalCount}), High(${highCount}), Moderate(${moderateCount})`);
      
      if (criticalCount > 0 || highCount > 0) {
        result.status = 'fail';
        hasErrors = true;
        securityReport.vulnerabilities.push(...Object.values(auditData.vulnerabilities).filter(v => v.severity === 'critical' || v.severity === 'high'));
      } else if (moderateCount > 0) {
        result.status = 'warning';
        hasWarnings = true;
      }
      
      result.details.push(`Vulnerabilities found: Critical(${criticalCount}), High(${highCount}), Moderate(${moderateCount})`);
    } else {
      console.log('  ‚úÖ ÈáçÂ§ß„Å™ËÑÜÂº±ÊÄß„ÅØÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü');
      result.details.push('No critical vulnerabilities found');
    }
  } catch (error) {
    console.log('  ‚ö†Ô∏è  npm audit „ÅÆÂÆüË°å„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error.message);
    result.warnings.push('npm audit execution failed');
    hasWarnings = true;
  }
  
  securityReport.checks.dependencyVulnerabilities = result;
  console.log('');
}

// 7. „ÇΩ„Éº„Çπ„Ç≥„Éº„ÉâÂÜÖ„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂïèÈ°å„ÉÅ„Çß„ÉÉ„ÇØ
function checkSourceCodeSecurity() {
  console.log('üîé „ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ');
  const result = { status: 'pass', details: [], warnings: [] };
  
  const srcDir = 'src';
  if (!fs.existsSync(srcDir)) {
    console.log('  ‚ö†Ô∏è  src „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    result.warnings.push('src directory not found');
    hasWarnings = true;
    return;
  }
  
  // Âç±Èô∫„Å™„Éë„Çø„Éº„É≥„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  const dangerousPatterns = [
    { pattern: /eval\s*\(/g, description: 'eval() usage detected', severity: 'high' },
    { pattern: /innerHTML\s*=/g, description: 'innerHTML usage detected', severity: 'medium' },
    { pattern: /document\.write\s*\(/g, description: 'document.write() usage detected', severity: 'high' },
    { pattern: /\$\{.*\}/g, description: 'Template literal in sensitive context', severity: 'low' },
    { pattern: /localStorage\.setItem.*password/gi, description: 'Password stored in localStorage', severity: 'critical' },
    { pattern: /sessionStorage\.setItem.*token/gi, description: 'Token stored in sessionStorage', severity: 'medium' }
  ];
  
  function scanFile(filePath) {
    if (!filePath.endsWith('.ts') && !filePath.endsWith('.tsx') && !filePath.endsWith('.js') && !filePath.endsWith('.jsx')) {
      return;
    }
    
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      dangerousPatterns.forEach(({ pattern, description, severity }) => {
        const matches = content.match(pattern);
        if (matches) {
          const message = `${description} in ${filePath} (${matches.length} occurrences)`;
          console.log(`  ‚ö†Ô∏è  ${message}`);
          
          if (severity === 'critical' || severity === 'high') {
            result.status = 'fail';
            hasErrors = true;
          } else {
            hasWarnings = true;
          }
          
          result.warnings.push(message);
        }
      });
    } catch (error) {
      console.log(`  ‚ö†Ô∏è  „Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº: ${filePath}`);
    }
  }
  
  // „Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂÜçÂ∏∞ÁöÑ„Å´„Çπ„Ç≠„É£„É≥
  function scanDirectory(dir) {
    const items = fs.readdirSync(dir);
    items.forEach(item => {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      if (stat.isDirectory()) {
        scanDirectory(fullPath);
      } else {
        scanFile(fullPath);
      }
    });
  }
  
  scanDirectory(srcDir);
  
  if (result.warnings.length === 0) {
    console.log('  ‚úÖ Âç±Èô∫„Å™„Ç≥„Éº„Éâ„Éë„Çø„Éº„É≥„ÅØÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü');
    result.details.push('No dangerous code patterns detected');
  }
  
  securityReport.checks.sourceCodeSecurity = result;
  console.log('');
}

// 8. „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É¨„Éù„Éº„ÉàÁîüÊàê
function generateSecurityReport() {
  console.log('üìä „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É¨„Éù„Éº„ÉàÁîüÊàê');
  
  const reportPath = 'security-report.json';
  securityReport.summary = {
    hasErrors,
    hasWarnings,
    totalChecks: Object.keys(securityReport.checks).length,
    passedChecks: Object.values(securityReport.checks).filter(c => c.status === 'pass').length,
    failedChecks: Object.values(securityReport.checks).filter(c => c.status === 'fail').length,
    warningChecks: Object.values(securityReport.checks).filter(c => c.status === 'warning').length
  };
  
  try {
    fs.writeFileSync(reportPath, JSON.stringify(securityReport, null, 2));
    console.log(`  ‚úÖ „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É¨„Éù„Éº„Éà„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü: ${reportPath}`);
  } catch (error) {
    console.log(`  ‚ö†Ô∏è  „É¨„Éù„Éº„ÉàÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
  }
  
  // „É¨„Ç≥„É°„É≥„Éá„Éº„Ç∑„Éß„É≥ËøΩÂä†
  if (hasErrors || hasWarnings) {
    console.log('\nüìã „Çª„Ç≠„É•„É™„ÉÜ„Ç£ÊîπÂñÑÊèêÊ°à:');
    securityReport.recommendations.forEach(rec => {
      console.log(`  ‚Ä¢ ${rec}`);
    });
  }
  
  console.log('');
}

// „É°„Ç§„É≥ÂÆüË°å
async function main() {
  checkEnvTemplate();
  checkNextConfig();
  checkGitignore();
  checkPackageScripts();
  checkGitHubActions();
  checkDependencyVulnerabilities();
  checkSourceCodeSecurity();
  generateSecurityReport();
  
  console.log('\nüèÅ „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÁµêÊûú„Çµ„Éû„É™„Éº:');
  console.log(`   - ÂÆüË°å„ÉÅ„Çß„ÉÉ„ÇØÊï∞: ${Object.keys(securityReport.checks).length}`);
  console.log(`   - ÂêàÊ†º: ${Object.values(securityReport.checks).filter(c => c.status === 'pass').length}`);
  console.log(`   - Â§±Êïó: ${Object.values(securityReport.checks).filter(c => c.status === 'fail').length}`);
  console.log(`   - Ë≠¶Âëä: ${Object.values(securityReport.checks).filter(c => c.status === 'warning').length}`);
  
  if (hasErrors) {
    console.log('\n‚ùå „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ„Åß„Ç®„É©„Éº„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü');
    process.exit(1);
  } else if (hasWarnings) {
    console.log('\n‚ö†Ô∏è  „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü - Ë≠¶Âëä„Åå„ÅÇ„Çä„Åæ„Åô');
    process.exit(0);
  } else {
    console.log('\n‚úÖ „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü - ÂïèÈ°å„ÅÇ„Çä„Åæ„Åõ„Çì');
    process.exit(0);
  }
}

main().catch(error => {
  // Êú¨Áï™Áí∞Â¢É„Åß„ÅØconsole.error„ÇíÁÑ°ÂäπÂåñ
  if (process.env.NODE_ENV !== 'production') {
    console.error(error);
  }
});
